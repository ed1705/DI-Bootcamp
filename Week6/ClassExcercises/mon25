-- -- Database: EmployeeDept

-- -- DROP DATABASE IF EXISTS "EmployeeDept";

-- CREATE DATABASE "EmployeeDept"
--     WITH
--     OWNER = postgres
--     ENCODING = 'UTF8'
--     LC_COLLATE = 'C'
--     LC_CTYPE = 'C'
--     TABLESPACE = pg_default
--     CONNECTION LIMIT = -1
--     IS_TEMPLATE = False;
	
	
	
-- 	CREATE SEQUENCE seq_dept
-- INCREMENT 10
-- START 10;


-- CREATE TABLE DEPARTMENT
-- (
--  DEPTCODE   INTEGER NOT NULL DEFAULT nextval('seq_dept') PRIMARY KEY,
--  DeptName   CHAR(30),
--  LOCATION   VARCHAR(33) UNIQUE
-- );

-- CREATE TABLE EMPLOYEE
-- (
--  EmpCode      INTEGER PRIMARY KEY,
--  EmpFName     VARCHAR(15) NOT NULL,
--  EmpLName     VARCHAR(15) NOT NULL,
--  Job          VARCHAR(45),
--  Manager      CHAR(4),
--  HireDate     DATE,
--  Salary       DECIMAL DEFAULT 0,
--  Commission   INTEGER,
--  Department_code     INTEGER REFERENCES DEPARTMENT (DEPTCODE)
-- );

-- INSERT INTO DEPARTMENT (DeptName,LOCATION) VALUES 
-- ('FINANCE', 'EDINBURGH'),
-- ('SOFTWARE','PADDINGTON'),
-- ('SALES', 'MAIDSTONE'),
-- ('MARKETING', 'DARLINGTON'),
-- ('ADMIN', 'BIRMINGHAM');
      
INSERT INTO EMPLOYEE (EmpCode,EmpFName,EmpLName,Job,Manager,HireDate,Salary,Commission,Department_code)
VALUES (9369, 'TONY', 'STARK', 'SOFTWARE ENGINEER', 7902, '1980-12-17', 2800,0,20),
       (9499, 'TIM', 'ADOLF', 'SALESMAN', 7698, '1981-02-20', 1600, 300,30),    
       (9566, 'KIM', 'JARVIS', 'MANAGER', 7839, '1981-04-02', 3570,0,20),
       (9654, 'SAM', 'MILES', 'SALESMAN', 7698, '1981-09-28', 1250, 1400, 30),
       (9782, 'KEVIN', 'HILL', 'MANAGER', 7839, '1981-06-09', 2940,0,10),
       (9788, 'CONNIE', 'SMITH', 'ANALYST', 7566, '1982-12-09', 3000,0,20),
       (9839, 'ALFRED', 'KINSLEY', 'PRESIDENT', 7566, '1981-11-17', 5000,0, 10),
       (9844, 'PAUL', 'TIMOTHY', 'SALESMAN', 7698, '1981-09-08', 1500,0,30),
       (9876, 'JOHN', 'ASGHAR', 'SOFTWARE ENGINEER', 7788, '1983-01-12',3100,0,20),
       (9900, 'ROSE', 'SUMMERS', 'TECHNICAL LEAD', 7698, '1981-12-03', 2950,0, 20),
       (9902, 'ANDREW', 'FAULKNER', 'ANALYST', 7566, '1981-12-03', 3000,0, 10),
       (9934, 'KAREN', 'MATTHEWS', 'SOFTWARE ENGINEER', 7782, '1982-01-23', 3300,0,20),
       (9591, 'WENDY', 'SHAWN', 'SALESMAN', 7698, '1981-02-22', 500,0,30),
       (9698, 'BELLA', 'SWAN', 'MANAGER', 7839, '1981-05-01', 3420, 0,30),
       (9777, 'MADII', 'HIMBURY', 'ANALYST', 7839, '1981-05-01', 2000, 200, NULL),
       (9860, 'ATHENA', 'WILSON', 'ANALYST', 7839, '1992-06-21', 7000, 100, 50),
       (9861, 'JENNIFER', 'HUETTE', 'ANALYST', 7839, '1996-07-01', 5000, 100, 50);
	 -- 1. How many employees are in dept 10.
SELECT COUNT(*) FROM employee WHERE departmentcode=10;
​
-- 16 employees : one employee doesnt work in a dept
SELECT COUNT(departmentcode) FROM employee;
-- 17 employees
SELECT COUNT(*) FROM employee; 
​
-- 2. How many employees are analyst in dept 10.
SELECT COUNT(*) FROM employee WHERE departmentcode=10 AND job ILIKE '%analyst%';
​
-- 3. Display the names of each employees, their job and dept location
-- INNER JOIN to join several tables depending on their relationship
-- foreign key of one table references the primary key in another table
SELECT empfname, job,department.location
FROM employee
INNER JOIN department
ON employee.departmentcode=department.deptcode;
​
-- 4. Find the avg salary of the software engineers
SELECT ROUND(AVG(salary),2) FROM employee WHERE job ILIKE '%software%';
​
-- 5. Which join should we use to display the employee 9777 even if he has no deptcode?
SELECT EMPFNAME, deptcode
FROM employee
LEFT JOIN department
ON employee.departmentcode=department.deptcode;
​
-- 6. Create a query that displays EMPFNAME, EMPLNAME, Department_code, DEPTNAME, 
-- LOCATION from EMPLOYEE, and DEPARTMENT tables. 
-- Make sure the results are in the ascending order based on the EMPFNAME and LOCATION of the department.
SELECT EMPFNAME, EMPLNAME, departmentcode, DEPTNAME, department.LOCATION
FROM employee
INNER JOIN department
ON employee.departmentcode=department.deptcode
ORDER BY EMPFNAME, department.LOCATION ASC;
​
​
-- 7.  Display EMPFNAME and "TOTAL SALARY" for each employee (commission and salary)
SELECT empfname, (salary+commission) as total FROM employee;
​
SELECT empfname, SUM(salary+commission) as total FROM employee
GROUP BY empfname;
​
-- 8. Display MAX SALARY from the EMPLOYEE table.
SELECT MAX(salary) from employee;  
III. Display DATA
1. How many employees are in dept 10.
SELECT COUNT(*) FROM Employee WHERE Department_Code=10;3
2. How many employees are analyst in dept 10.
SELECT COUNT(*) FROM employee WHERE Department_Code=10 AND job='ANALYST'; (job ILIKE '%analyst%')
3. Display the names of each employees, their job and dept location
SELECT EmpFName, Job, Location
FROM Department
INNER JOIN Employee 
ON department.deptcode = employee.Department_code;
4. Find the avg salary of the software engineers
SELECT ROUND(AVG(Salary),2)FROM Employee WHERE Job ='SOFTWARE ENGINEER';
5. Which join should we use to display the employee 9777 even if he has no deptcode?
SELECT EMpCOde
FROM department
RIGHT JOIN Employee
ON employee.DepartmentCode=department.Deptcode;
6. Create a query that displays EMPFNAME, EMPLNAME, Department_code, DEPTNAME, LOCATION from EMPLOYEE, and DEPARTMENT tables. Make sure the results are in the ascending order based on the EMPFNAME and LOCATION of the department.
SELECT EMPFNAME, EMPLNAME, Department_code, DEPTNAME, LOCATION
FROM department
INNER JOIN Employee
ON Department_Code=Deptcode;
ORDER BY EmpFName, location;

7.  Display EMPFNAME and "TOTAL SALARY" for each employee (commission and salary)
SELECT EmpFName, (Salary+Commission) AS Total_Salary FROM Employee


8. Display MAX SALARY from the EMPLOYEE table.
INSERT INTO actors (first_name, last_name, date_birth, number_oscars, nationality)
VALUES('Angelina', 'Jolie', '1975-06-04', 2, 'American');
INSERT INTO actors (first_name, last_name, date_birth, number_oscars, nationality)
VALUES('Emma', 'Watson', '1990-04-15', 0, 'British');
-- One to One
-- One person has One TZ
-- One TZ belongs to ONLY ONE PERSON
-- One person has One profile
-- One profile belongs to ONLY ONE PERSON
-- One to One :  
-- An actor can own only one car, 
-- and a car belongs to only one actor
-- UNIQUE FK
CREATE TABLE cars (
  car_id SERIAL PRIMARY KEY,
  brand VARCHAR(30) NOT NULL,
  color VARCHAR(30) NOT NULL,
  owner_id INTEGER UNIQUE REFERENCES actors (actor_id)
);
-- SUBQUERIES
INSERT INTO cars (brand, color, owner_id)
VALUES('Renault', 'black',(SELECT actor_id FROM actors WHERE first_name='George' AND last_name='Clooney')),
      ('Mazda', 'red', (SELECT actor_id FROM actors WHERE first_name='Emma' AND last_name='Watson'))
RETURNING *
--ERROR
-- duplicate key value violates unique constraint "cars_test_owner_id_key"
-- DETAIL:  Key (owner_id)=(2) already exists.
-- error duplicate key
INSERT INTO cars (brand, color, owner_id)
VALUES('Jaguar', 'black',(SELECT actor_id FROM actors WHERE first_name='George' AND last_name='Clooney'));
-- add some more cars
INSERT INTO cars (brand, color)
VALUES('Jaguar', 'yellow'),('BMW', 'pink')
RETURNING *
-- Find the car owned by George Clooney
SELECT last_name, brand
FROM cars
INNER JOIN actors
ON actor_id = owner_id
WHERE last_name='Clooney';
-- Find the actors that own a car, and the cars not yet bought
SELECT first_name, brand
FROM actors
RIGHT JOIN cars
ON actor_id = owner_id;
-- Using the Emp/Dept database
-- 1. Create a Boss table with the columns boss_id, boss_name, boss_type (ie.nice, angry, funny ect...),
-- and dept_number:
CREATE TABLE boss (
  boss_id SERIAL PRIMARY KEY,
  boss_name VARCHAR(50) NOT NULL,
  boss_type VARCHAR(30) NOT NULL,
  boss_code INTEGER UNIQUE REFERENCES department (deptcode)
);

-- The boss table,has a one to one relationship with the department table:
-- => a department can be managed by only 1 boss, and a boss can manage only 1 department
-- 1. Add a few bosses : one for the finance dept , one for sales and one for marketing (look for the id of those dept - use subqueries)
-- 2. What is the type and name of the boss of the dept Finance (show the dept name, not the dept id) (edited) 
SELECT * FROM department

INSERT INTO boss (boss_name, boss_type,boss_code )
VALUES ('bob', 'bad', (SELECT deptcode FROM department WHERE deptname = 'FINANCE'));
SELECT * FROM boss
INSERT INTO boss (boss_name, boss_type,boss_code )
VALUES ('joey', 'friendly', (SELECT deptcode FROM department WHERE deptname = 'MARKETING'));

SELECT boss_name, boss_type, deptname
FROM boss
INNER JOIN department
ON boss_code = deptcode
WHERE deptname = 'FINANCE';
